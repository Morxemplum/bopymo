from godot_types import *

import datetime
from enum import Enum
import random


class Game_Version:
    def __init__(self, major, minor, micro):
        self.major = major
        self.minor = minor
        self.micro = micro

    def __eq__(self, other):
        return (
            self.major == other.major
            and self.minor == other.minor
            and self.micro == other.micro
        )

    def __lt__(self, other):
        if self.major > other.major:
            return False
        elif self.major < other.major:
            return True
        else:
            if self.minor > other.minor:
                return False
            elif self.minor < other.minor:
                return True
            else:
                return self.micro < other.micro

    def __gt__(self, other):
        if self.major < other.major:
            return False
        elif self.major > other.major:
            return True
        else:
            if self.minor < other.minor:
                return False
            elif self.minor > other.minor:
                return True
            else:
                return self.micro > other.micro

    def __le__(self, other):
        return self < other or self == other

    def __ge__(self, other):
        return self > other or self == other

    def __ne__(self, other):
        return not (self == other)

    def __str__(self):
        return str(self.major) + "." + str(self.minor) + "." + str(self.micro)


GAME_VERSION = Game_Version(1, 0, 8)


### ENUMS


class Block_ID(Enum):
    # PRIMITIVES
    CUBE = 0
    RAMP = 1
    CYLINDER = 2
    SPHERE = 5
    CORNER_RAMP = 7
    CONE = 8
    PYRAMID = 12
    PYRAMID_CORNER = 13
    ROUNDED_RAMP = 15
    HOLE = 20
    ARCH = 21
    HALF_ARCH = 22
    LOOP = 32

    # DECORATION
    PINE_TREE = 1000
    PINE_TREE_SNOW = 1001
    LOGO = 1002
    LOGO_ICON = 1003
    PALM_TREE = 1004
    STREET_LAMP = 1005
    FLOWER = 1006
    FENCE = 1007
    TORCH = 1008
    MESH = 1100
    CLOUD = 1101

    # ACTION
    SPRING = 2000
    WATER = 2001
    SPAWN = 2002
    CHECKPOINT = 2003
    TOKEN = 2004
    LADDER = 2005
    ICE = 2006
    COMPLETION_STAR = 2007
    LAVA = 2008
    BOOST_PANEL = 2009
    SPEED_PANEL = 2010
    GRATES = 2011
    DISAPPEARING_BLOCK = 2012
    MISSILE_LAUNCHER = 2013
    BREAKABLE_BLOCK = 2014
    CANNON = 2015
    WEB = 2025

    # NPC
    BOPI_SPAWNER = 3000


class Block_Pattern(Enum):
    CHECKERBOARD = 0
    HEX = 1
    STRIPES = 2
    PLANKS = 3
    ZIG_ZAG = 4
    CIRCLES = 5
    DIAMONDS = 6
    LARGE_DIAMONDS = 7
    BRICKS = 8
    LARGE_BRICKS = 9
    WAVES = 10
    CHEVRON = 11
    GEOMETRIC = 12
    HORIZONTAL_STRIPES = 13
    VERTICAL_STRIPES = 14
    X = 15
    HEARTS = 17


class Sky(Enum):
    DAY = 0
    SUNSET = 1
    NIGHT = 2
    RAINDROP = 3
    ALIEN = 4
    DULL = 5
    WINTER = 6
    INFERNAL = 7
    FLAME = 8
    GOLDEN = 9
    VIOLET = 10
    THE_SUN = 11
    HALLOWEEN = 12
    OVERCAST = 13
    STARLIT_CITY = 14
    VOID = 15
    DESERT = 16


class Weather(Enum):
    CLEAR = 0
    SNOW = 1
    RAIN = 2
    VOID = 3
    AUTUMN = 4


class Music(Enum):
    SERENE = 0
    SWAYING_DREAMS = 1
    PLAYFUL_WALTZ = 2
    SICILIAN_STREET = 3
    CONTEMPLATION = 4
    CAVE_AMBIENCE = 5
    FUNKY = 6
    DARKNESS_APPROACHES = 7
    CARNIVAL = 8
    LATE_NIGHT_FIREWORKS = 9
    I_DONT_KNOW = 10
    WINTER_FOREST = 11
    ASSAULT_ON_THE_EAR_DRUMS = 12
    BLOOD_MOON = 13
    ISAIAH_NEW_SONG = 14
    BAMBA = 15
    TORTUGA = 16
    FRIVOLOUS_FLUTES = 17
    SIXTY_FOUR = 64


### BOPIMO CLASSES


class Bopimo_Property:
    def __init__(self, value, min_version=Game_Version(1, 0, 8)):
        self.value = value
        self.min_version = min_version

    def compatible(self, level_version):
        return level_version >= self.min_version


class Bopimo_Level:
    def __init__(
        self, name="My Bopimo Level", description="Autogenerated with Python!"
    ):
        # METADATA
        self.game_version = GAME_VERSION
        self.time_of_save = datetime.datetime.now(datetime.UTC)

        assert self.game_version != Game_Version(
            1, 0, 9
        ), "Bopjson on 1.0.9 is completely broken"

        # LEVEL INFORMATION
        self.name = name
        self.description = description
        self.music = Godot_PackedInt32Array(
            [Music.SERENE, Music.SWAYING_DREAMS, Music.PLAYFUL_WALTZ]
        )
        # 0 means infinite lives
        self.lives = 0
        self.players_damage_players = True

        # ATMOSPHERE
        self.sky = Sky.DAY
        self.sky_energy = 1  # Another way of saying "Level brightness"
        self.ambient_color = Godot_Color(0, 0, 0)  # Introduced in Bopimo 1.0.10
        self.weather = Weather.CLEAR
        self.fog_enabled = False
        self.fog_distance = 0
        self.fog_color = Godot_Color(0.5, 0.5, 0.5)
        self.gravity = 85

        # MAP INFORMATION
        self.death_plane = -1000
        self.blocks = []

    def add_object(self, obj):
        self.blocks.append(obj)

    def add_objects(self, obj_list):
        for obj in obj_list:
            self.blocks.append(obj)

    def to_json(self):
        obj = {
            "GAME_VERSION": str(self.game_version),
            "TIME_OF_SAVE": self.time_of_save.strftime("%Y-%m-%d %H:%M:%S"),
            "level_name": self.name,
            "level_description": self.description,
            "level_music": self.music.to_json_object(),
            "level_lives": self.lives,
            "level_players_damage_players": self.players_damage_players,
            "level_sky": self.sky.value,
            "level_sky_energy": self.sky_energy,
            "level_ambient_color": self.ambient_color.to_json_object(),
            "level_weather": self.weather.value,
            "level_fog_enabled": self.fog_enabled,
            "level_fog_distance": self.fog_distance,
            "level_fog_color": self.fog_color.to_json_object(),
            "level_gravity": self.gravity,
            "level_death_plane": self.death_plane,
            "level_blocks": [],
        }
        # Append all the blocks in JSON
        for block in self.blocks:
            obj["level_blocks"].append(block.to_json())

        return obj


class Bopimo_Object:
    def __init__(
        self,
        id=Block_ID.CUBE,
        name="Object",
        color=Godot_Color(0, 0, 0),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        self.uid = random.randrange(1, 2**31)
        self.id = id
        self.name = name
        self.nametag = False  # Introduced in Bopimo 1.0.9
        self.color = color
        self.position = position
        self.rotation = rotation
        self.scale = scale

        self.position_enabled = False
        self.position_points = Godot_PackedVector3Array([])
        self.position_travel_speed = 5

        self.rotation_enabled = False
        self.rotation_pivot_offset = Godot_Vector3(0, 0, 0)
        self.rotation_direction = Godot_Vector3(0, 0, 0)
        self.rotation_speed = 1

    def to_json(self, variant=1):
        match variant:
            case 1:
                return {
                    "__gdtype": "Dictionary",
                    "pairs": [
                        godot_kv_pair(attribute("uid"), self.uid),
                        godot_kv_pair(attribute("block_id"), self.id.value),
                        godot_kv_pair(attribute("block_name"), self.name),
                        godot_kv_pair(attribute("nametag"), self.nametag),
                        godot_kv_pair(
                            attribute("block_color"), self.color.to_json_object()
                        ),
                        godot_kv_pair(
                            attribute("block_position"), self.position.to_json_object()
                        ),
                        godot_kv_pair(
                            attribute("block_rotation"), self.rotation.to_json_object()
                        ),
                        godot_kv_pair(
                            attribute("block_scale"), self.scale.to_json_object()
                        ),
                        godot_kv_pair("position_enabled", self.position_enabled),
                        godot_kv_pair(
                            "position_points", self.position_points.to_json_object()
                        ),
                        godot_kv_pair(
                            "position_travel_speed", self.position_travel_speed
                        ),
                        godot_kv_pair("rotation_enabled", self.rotation_enabled),
                        godot_kv_pair(
                            "rotation_pivot_offset",
                            self.rotation_pivot_offset.to_json_object(),
                        ),
                        godot_kv_pair(
                            "rotation_direction",
                            self.rotation_direction.to_json_object(),
                        ),
                        godot_kv_pair("rotation_speed", self.rotation_speed),
                    ],
                }
            # For some strange reason, some objects will abandon the Godot Dictionary and have a much simpler JSON reading.
            # It should be done this way, but the inconsistency drives me nuts and I hate it
            case 2:
                return {
                    "uid": self.uid,
                    "block_id": self.id.value,
                    "block_name": self.name,
                    "block_color": self.color.to_json_object(),
                    "block_position": self.position.to_json_object(),
                    "block_rotation": self.rotation.to_json_object(),
                    "block_scale": self.scale.to_json_object(),
                    "position_enabled": self.position_enabled,
                    "position_points": self.position_points.to_json_object(),
                    "position_travel_speed": self.position_travel_speed,
                    "rotation_enabled": self.rotation_enabled,
                    "rotation_pivot_offset": self.rotation_pivot_offset.to_json_object(),
                    "rotation_direction": self.rotation_direction.to_json_object(),
                    "rotation_speed": self.rotation_speed,
                }


class Bopimo_Tilable_Object(Bopimo_Object):
    def __init__(
        self,
        id=Block_ID.CUBE,
        name="Tilable Object",
        color=Godot_Color(0, 0, 0),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(id, name, color, position, rotation, scale)
        self.pattern = Block_Pattern.CHECKERBOARD
        self.pattern_color = Godot_Color(0, 0, 0)

    def to_json(self, variant=1):
        obj = super().to_json(variant)
        match variant:
            case 1:
                tilable_pairs = [
                    godot_kv_pair(attribute("block_pattern"), self.pattern.value),
                    godot_kv_pair(
                        attribute("block_pattern_color"),
                        self.pattern_color.to_json_object(),
                    ),
                ]
                obj["pairs"].extend(tilable_pairs)
                return obj
            case 2:
                return obj | {
                    "block_pattern": self.pattern.value,
                    "block_pattern_color": self.pattern_color.to_json_object(),
                }


## BOPIMO BLOCKS


class Bopimo_Block(Bopimo_Tilable_Object):
    def __init__(
        self,
        id=Block_ID.CUBE,
        name="Generated Block",
        color=Godot_Color(34.0 / 255, 139.0 / 255, 34.0 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(id, name, color, position, rotation, scale)
        # Block exclusive attributes
        self.transparency_enabled = False
        self.transparency = 7
        self.collision_enabled = True

    def to_json(self):
        obj = super().to_json()
        block_pairs = [
            godot_kv_pair(attribute("transparency"), self.transparency),
            godot_kv_pair(attribute("collision_enabled"), self.collision_enabled),
            godot_kv_pair(attribute("transparency_enabled"), self.transparency_enabled),
        ]
        obj["pairs"].extend(block_pairs)
        return obj


## ACTION BLOCKS


class Bopimo_Spawn(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Spawn",
        color=Godot_Color(160.0 / 255, 30.0 / 255, 176.0 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(4, 1, 4),
    ):
        super().__init__(Block_ID.SPAWN, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json()


class Bopimo_Checkpoint(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Checkpoint",
        color=Godot_Color(160.0 / 255, 30.0 / 255, 176.0 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 4, 2),
    ):
        super().__init__(Block_ID.CHECKPOINT, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json()


class Bopimo_Completion_Star(Bopimo_Tilable_Object):
    star_counter = 0

    def __init__(
        self,
        name="Generated Completion Star",
        color=Godot_Color(94.0 / 255, 0, 176.0 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(4, 4, 4),
    ):
        super().__init__(
            Block_ID.COMPLETION_STAR, name, color, position, rotation, scale
        )
        self.mute = False
        self.float_height = 1.5
        # Star ID should NOT be changed! The id is tied to how many there are
        self.__star_id = self.star_counter
        self.star_counter += 1

    def to_json(self):
        obj = super().to_json()
        star_pairs = [
            godot_kv_pair(attribute("mute"), self.mute),
            godot_kv_pair(attribute("star_id"), self.__star_id),
            godot_kv_pair(attribute("float_height"), self.float_height),
        ]
        obj["pairs"].extend(star_pairs)
        return obj


class Bopimo_Spring(Bopimo_Object):
    def __init__(
        self,
        name="Generated Spring",
        color=Godot_Color(227 / 255, 181 / 255, 4 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(Block_ID.SPRING, name, color, position, rotation, scale)
        # Spring exclusive attributes
        self.bounce_force = 50
        self.can_ground_pound = True

    def to_json(self):
        obj = super().to_json()
        spring_pairs = [
            godot_kv_pair(attribute("bounce_force"), self.bounce_force),
            godot_kv_pair(attribute("can_ground_pound"), self.can_ground_pound),
        ]
        obj["pairs"].extend(spring_pairs)
        return obj


class Bopimo_Lava(Bopimo_Object):
    def __init__(
        self,
        name="Generated Lava",
        color=Godot_Color(183 / 255, 14 / 255, 0),
        pattern_color = Godot_Color(1, 162 / 255, 73 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
        damage=25
    ):
        super().__init__(Block_ID.LAVA, name, color, position, rotation, scale)
        self.pattern_color = pattern_color
        self.damage_amount = damage

    def to_json(self):
        obj = super().to_json(2)
        return obj | {
            "block_pattern_color": self.pattern_color.to_json_object(),
            "damage_amount": self.damage_amount}


class Bopimo_Water(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Water",
        color=Godot_Color(71 / 255, 130 / 255, 1),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(4, 4, 4),
    ):
        super().__init__(Block_ID.WATER, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json()


class Bopimo_Ladder(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Ladder",
        color=Godot_Color(78 / 255, 52 / 255, 46 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 1),
    ):
        super().__init__(Block_ID.LADDER, name, color, position, rotation, scale)
        self.climbing_speed = 1

    def to_json(self):
        obj = super().to_json()
        ladder_pairs = [godot_kv_pair(attribute("climbing_speed"), self.climbing_speed)]
        obj["pairs"].extend(ladder_pairs)
        return obj


class Bopimo_Token(Bopimo_Object):
    def __init__(
        self,
        name="Generated Token",
        color=Godot_Color(236 / 255, 126 / 255, 0),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(Block_ID.TOKEN, name, color, position, rotation, scale)
        self.heal_amount = 5
        self.regeneration_time = 45
        self.worth = 1
        self.model = 0

    def to_json(self):
        obj = super().to_json()
        token_pairs = [
            godot_kv_pair(attribute("heal_amount"), self.heal_amount),
            godot_kv_pair(attribute("regeneration_time"), self.regeneration_time),
            godot_kv_pair(attribute("worth"), self.worth),  # I have none
            godot_kv_pair(attribute("model"), self.model),
        ]
        obj["pairs"].extend(token_pairs)
        return obj


class Bopimo_Disappearing_Block(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Disappearing Block",
        color=Godot_Color(122 / 255, 9 / 255, 0),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(
            Block_ID.DISAPPEARING_BLOCK, name, color, position, rotation, scale
        )
        self.pattern = Block_Pattern.X
        self.disappears_after = 2
        self.players_only = False

    def to_json(self):
        obj = super().to_json(2)
        return obj | {
            "disappears_after": self.disappears_after,
            "players_only": self.players_only,
        }


class Bopimo_Grates(Bopimo_Object):
    def __init__(
        self,
        name="Generated Grates",
        color=Godot_Color(0, 10 / 255, 18 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(4, 1, 4),
    ):
        super().__init__(Block_ID.GRATES, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json(2)


class Bopimo_Speed_Panel(Bopimo_Object):
    def __init__(
        self,
        name="Generated Speed Panel",
        color=Godot_Color(27 / 255, 0, 32 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(3, 1, 3),
    ):
        super().__init__(Block_ID.SPEED_PANEL, name, color, position, rotation, scale)
        self.new_speed = 30
        self.duration = 10

    def to_json(self):
        obj = super().to_json(2)
        return obj | {"new_speed": self.new_speed, "duration": self.duration}


class Bopimo_Boost_Panel(Bopimo_Object):
    def __init__(
        self,
        name="Generated Boost Panel",
        color=Godot_Color(0, 2 / 255, 34 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(3, 1, 3),
    ):
        super().__init__(Block_ID.BOOST_PANEL, name, color, position, rotation, scale)
        self.boost = 75
        self.vertical_boost = 15

    def to_json(self):
        obj = super().to_json(2)
        return obj | {"boost": self.boost, "vertical_boost": self.vertical_boost}


class Bopimo_Ice(Bopimo_Object):
    def __init__(
        self,
        name="Generated Ice",
        color=Godot_Color(138 / 255, 220 / 255, 223 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(Block_ID.ICE, name, color, position, rotation, scale)
        self.slipperiness = 1

    def to_json(self):
        obj = super().to_json(2)
        return obj | {"slipperiness": self.slipperiness}


class Bopimo_Breakable_Block(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Breakable Block",
        color=Godot_Color(129 / 255, 0, 40 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(
            Block_ID.BREAKABLE_BLOCK, name, color, position, rotation, scale
        )
        self.pattern = Block_Pattern.BRICKS
        self.max_health = 40
        self.regeneration_time = 10

    def to_json(self):
        obj = super().to_json(2)
        return obj | {
            "max_health": self.max_health,
            "regeneration_time": self.regeneration_time,
        }


class Bopimo_Cannon(Bopimo_Object):
    def __init__(
        self,
        name="Generated Cannon",
        color=Godot_Color(42 / 255, 2 / 255, 47 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(Block_ID.CANNON, name, color, position, rotation, scale)
        self.power = 0

    def to_json(self):
        obj = super().to_json(2)
        return obj | {"power": self.power}


class Bopimo_Web(Bopimo_Object):
    def __init__(
        self,
        name="Generated Web",
        color=Godot_Color(1, 1, 1),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(6, 1, 6),
    ):
        super().__init__(Block_ID.WEB, name, color, position, rotation, scale)
        self.stickiness = 0.5

    def to_json(self):
        obj = super().to_json()
        web_pairs = [godot_kv_pair(attribute("stickiness"), self.stickiness)]
        obj["pairs"].extend(web_pairs)
        return obj


class Bopimo_Missile_Launcher(Bopimo_Object):
    def __init__(
        self,
        name="Generated Missile Launcher",
        color=Godot_Color(160 / 255, 30 / 255, 176 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(
            Block_ID.MISSILE_LAUNCHER, name, color, position, rotation, scale
        )
        self.delay = 5
        self.missile_size = 1
        self.missile_speed = 15
        self.explosion_damage = 50
        self.explosion_force = 10
        self.explosion_size = 5
        self.model = 0

    def to_json(self):
        obj = super().to_json()
        missile_launcher_pairs = [
            godot_kv_pair("delay", self.delay),
            godot_kv_pair("missile_size", self.missile_size),
            godot_kv_pair("missile_speed", self.missile_speed),
            godot_kv_pair("explosion_damage", self.explosion_damage),
            godot_kv_pair("explosion_force", self.explosion_force),
            godot_kv_pair("explosion_size", self.explosion_size),
            godot_kv_pair(attribute("model"), self.model),
        ]
        obj["pairs"].extend(missile_launcher_pairs)
        return obj


## DECORATION BLOCKS


class Bopimo_Flower(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Flower",
        color=Godot_Color(160 / 255, 30 / 255, 176 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(Block_ID.FLOWER, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json()


class Bopimo_Fence(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Fence",
        color=Godot_Color(121 / 255, 85 / 255, 72 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 4, 1),
    ):
        super().__init__(Block_ID.FENCE, name, color, position, rotation, scale)
        self.pattern = Block_Pattern.PLANKS

    def to_json(self):
        return super().to_json()


class Bopimo_Pine_Tree(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Pine Tree",
        color=Godot_Color(0, 88 / 255, 36 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(5, 10, 5),
    ):
        super().__init__(Block_ID.PINE_TREE, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json()


class Bopimo_Pine_Tree_Snow(Bopimo_Pine_Tree):
    def __init__(
        self,
        name="Generated Pine Tree Snow",
        color=Godot_Color(0, 88 / 255, 36 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(5, 10, 5),
    ):
        super().__init__(name, color, position, rotation, scale)
        self.id = Block_ID.PINE_TREE_SNOW

    def to_json(self):
        return super().to_json()


class Bopimo_Palm_Tree(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Palm Tree",
        color=Godot_Color(94 / 255, 214 / 255, 0),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(8, 8, 8),
    ):
        super().__init__(Block_ID.PINE_TREE, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json()


class Bopimo_Street_Lamp(Bopimo_Object):
    def __init__(
        self,
        name="Generated Street Lamp",
        color=Godot_Color(1, 160 / 255, 30 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 10, 2),
    ):
        super().__init__(Block_ID.STREET_LAMP, name, color, position, rotation, scale)
        self.light_range = 25

    def to_json(self):
        obj = super().to_json()
        street_lamp_pairs = [godot_kv_pair(attribute("light_range"), self.light_range)]
        obj["pairs"].extend(street_lamp_pairs)
        return obj


class Bopimo_Torch(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Torch",
        color=Godot_Color(73 / 255, 48 / 255, 42 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(1, 2, 1),
    ):
        super().__init__(Block_ID.TORCH, name, color, position, rotation, scale)
        self.pattern = None
        self.pattern_color = Godot_Color(1, 68 / 255, 0)
        self.light_range = 25

    def to_json(self):
        obj = super().to_json()
        street_lamp_pairs = [godot_kv_pair(attribute("light_range"), self.light_range)]
        obj["pairs"].extend(street_lamp_pairs)
        return obj


class Bopimo_Logo(Bopimo_Object):
    def __init__(
        self,
        name="Generated Logo",
        primary_color=Godot_Color(130 / 255, 12 / 255, 155 / 255),
        secondary_color=Godot_Color(175 / 255, 85 / 255, 217 / 255),
        tertiary_color=Godot_Color(141 / 255, 62 / 255, 229 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(6, 2.5, 2),
    ):
        super().__init__(Block_ID.LOGO, name, primary_color, position, rotation, scale)
        self.secondary_color = secondary_color
        self.tertiary_color = tertiary_color

    def to_json(self):
        obj = super().to_json(2)
        return obj | {"color2": self.secondary_color, "color3": self.tertiary_color}


class Bopimo_Logo_Icon(Bopimo_Logo):
    def __init__(
        self,
        name="Generated Logo Icon",
        primary_color=Godot_Color(130 / 255, 12 / 255, 155 / 255),
        secondary_color=Godot_Color(175 / 255, 85 / 255, 217 / 255),
        tertiary_color=Godot_Color(141 / 255, 62 / 255, 229 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(6, 2.5, 2),
    ):
        super().__init__(
            name,
            primary_color,
            secondary_color,
            tertiary_color,
            position,
            rotation,
            scale,
        )
        self.id = Block_ID.LOGO_ICON

    def to_json(self):
        return super().to_json()


class Bopimo_Item_Mesh(Bopimo_Object):
    def __init__(
        self,
        name="Generated Item Mesh",
        color=Godot_Color(1, 1, 1),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 2, 2),
    ):
        super().__init__(Block_ID.MESH, name, color, position, rotation, scale)
        self.item_id = 1
        self.shaded = True

    def to_json(self):
        obj = super().to_json(2)
        return obj | {"item_id": self.item_id, "shaded": self.shaded}


class Bopimo_Cloud(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Cloud",
        color=Godot_Color(1, 1, 1),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(8, 2, 8),
    ):
        super().__init__(Block_ID.CLOUD, name, color, position, rotation, scale)

    def to_json(self):
        return super().to_json()


## NPC BLOCKS
class Bopimo_Bopi_Spawner(Bopimo_Tilable_Object):
    def __init__(
        self,
        name="Generated Bopi Spawner",
        color=Godot_Color(160 / 255, 30 / 255, 176 / 255),
        position=Godot_Vector3(0, 0, 0),
        rotation=Godot_Vector3(0, 0, 0),
        scale=Godot_Vector3(2, 0.5, 2),
    ):
        super().__init__(Block_ID.BOPI_SPAWNER, name, color, position, rotation, scale)
        self.max_health = 75
        self.attack_damage = 10
        self.move_speed = 15
        self.targeting_radius = 75
        self.stun_time = 3.5
        self.return_to_spawner = False
        self.sleep_time = 60

        self.head_color = Godot_Color(246 / 255, 156 / 255, 0)
        self.torso_color = Godot_Color(156 / 255, 156 / 255, 156 / 255)
        self.left_arm_color = Godot_Color(246 / 255, 156 / 255, 0)
        self.left_hand_color = Godot_Color(246 / 255, 156 / 255, 0)
        self.right_arm_color = Godot_Color(246 / 255, 156 / 255, 0)
        self.right_hand_color = Godot_Color(246 / 255, 156 / 255, 0)
        self.left_leg_color = Godot_Color(49 / 255, 51 / 255, 53 / 255)
        self.left_foot_color = Godot_Color(17 / 255, 17 / 255, 17 / 255)
        self.right_leg_color = Godot_Color(49 / 255, 51 / 255, 53 / 255)
        self.right_foot_color = Godot_Color(17 / 255, 17 / 255, 17 / 255)
        self.hats = Godot_PackedInt32Array([])
        self.face = -1
        self.shirt = -1
        self.pants = -1
        self.shoes = -1
        self.toy = -1

    # TODO: Add a function that recreates the level editor feature of putting in a username to resolve the avatar

    def to_json(self):
        obj = super().to_json()
        bopi_spawner_pairs = [
            godot_kv_pair("max_health", self.max_health),
            godot_kv_pair("attack_damage", self.attack_damage),
            godot_kv_pair("move_speed", self.move_speed),
            godot_kv_pair("targeting_radius", self.targeting_radius),
            godot_kv_pair("stun_time", self.stun_time),
            godot_kv_pair("return_to_spawner", self.return_to_spawner),
            godot_kv_pair(attribute("sleep_time"), self.sleep_time),
            godot_kv_pair(attribute("head_color"), self.head_color.to_json_object()),
            godot_kv_pair(attribute("torso_color"), self.torso_color.to_json_object()),
            godot_kv_pair(
                attribute("left_arm_color"), self.left_arm_color.to_json_object()
            ),
            godot_kv_pair(
                attribute("left_hand_color"), self.left_hand_color.to_json_object()
            ),
            godot_kv_pair(
                attribute("right_arm_color"), self.right_arm_color.to_json_object()
            ),
            godot_kv_pair(
                attribute("right_hand_color"), self.right_hand_color.to_json_object()
            ),
            godot_kv_pair(
                attribute("left_leg_color"), self.left_leg_color.to_json_object()
            ),
            godot_kv_pair(
                attribute("left_foot_color"), self.left_foot_color.to_json_object()
            ),
            godot_kv_pair(
                attribute("right_leg_color"), self.right_leg_color.to_json_object()
            ),
            godot_kv_pair(
                attribute("right_foot_color"), self.right_foot_color.to_json_object()
            ),
            godot_kv_pair(attribute("hats"), self.hats.to_json_object()),
            godot_kv_pair(attribute("face"), self.face),
            godot_kv_pair(attribute("shirt"), self.shirt),
            godot_kv_pair(attribute("pants"), self.pants),
            godot_kv_pair(attribute("shoes"), self.shoes),
            godot_kv_pair(attribute("toy"), self.toy),
        ]
        obj["pairs"].extend(bopi_spawner_pairs)
        return obj
